import com.github.blindpirate.gogradle.Go

import java.nio.file.Paths
import java.text.SimpleDateFormat
import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask

buildscript {
    repositories {
        mavenLocal()
        ["public", "thirdparty", "releases"].each { r ->
            maven {
                credentials {
                    username nexusUserName
                    password nexusPassword
                }
                url "${nexusBaseUrl}/repositories/${r}"
            }
        }
    }

    dependencies {
        classpath "com.xebialabs.gradle.plugins:gradle-xl-plugins-plugin:${xlPluginsPluginVersion}"
    }
}

plugins {
    id 'com.github.blindpirate.gogradle' version '0.11.3'
    id "jp.classmethod.aws" version "0.38"
    id 'org.sonarqube' version '2.6.2'
}

apply plugin: 'xebialabs.root.opinions'
apply plugin: 'xebialabs.opinions'
apply plugin: 'maven-publish'
apply plugin: 'jp.classmethod.aws.s3'
apply plugin: 'org.sonarqube'

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.xebialabs.xlclient'
            artifactId 'blueprint-cli'
            artifact("./build/darwin-amd64/xl-blueprint") {
                classifier = 'darwin-amd64'
                extension = 'bin'
            }
            artifact("./build/linux-amd64/xl-blueprint") {
                classifier = 'linux-amd64'
                extension = 'bin'
            }
            artifact("./build/windows-amd64/xl-blueprint.exe") {
                classifier = 'windows-amd64'
                extension = 'exe'
            }
        }
    }

    repositories {
        maven {
            def alphasRepoUrl = "${nexusBaseUrl}/repositories/alphas/"
            def releasesRepoUrl = "${nexusBaseUrl}/repositories/releases/"
            url project.version.toString().contains('alpha') ? alphasRepoUrl : releasesRepoUrl
            credentials {
                username nexusUserName
                password nexusPassword
            }
        }
    }
}

golang {
    goVersion = '1.12'
    packagePath = 'github.com/xebialabs/blueprint-cli' // go import path of project to be built, NOT local file system path!
}

goBuild {
    // Cross-compile platforms, update as necessary.
    targetPlatform = [
        'darwin-amd64', 'linux-amd64', 'windows-amd64'
    ]

    environment "CGO_ENABLED", "0" // To make sure a fully statically linked binary is produced even when building on linux

    def gitCommit = runCmd('git', 'rev-parse', 'HEAD')
    def gitVersion = runCmd('git', 'describe', '--long', '--dirty', '--always')
    def gitVersionShort = gitVersion.startsWith("blueprint-cli-") ? gitVersion.substring(10) : gitVersion

    def simpleDateFormat = new SimpleDateFormat("yyy-MM-dd'T'HH:mm:ss.SSS'Z'")
    simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    def date = simpleDateFormat.format(new Date())

    def ldflags = " -ldflags='" +
        ldflag("CliVersion", { -> project.version}) +
        ldflag("BuildVersion", gitVersionShort) +
        ldflag("BuildGitCommit", gitCommit) +
        ldflag("BuildDate", date) +
        (project.hasProperty("optimise") ? "-s -w" : "") +
        "'"

    println("LDFlags: ${ldflags}cp")
    def debugFlags = project.hasProperty("debug") ? " -gcflags \"all=-N -l\"" : ""

    // The ${} placeholder will be rendered in cross-compile
    go "build${debugFlags}${ldflags} -o ./build/\${GOOS}-\${GOARCH}/xl-blueprint\${GOEXE} cmd/blueprint/main.go"
    dumpVersion
}

aws {
    profileName = "default"
}

task upx {
    dependsOn goBuild
    doLast {
        exec {
            commandLine 'upx', "${project.buildDir}/darwin-amd64/xl-blueprint"
        }
        exec {
            commandLine 'upx', "${project.buildDir}/linux-amd64/xl-blueprint"
        }
        exec {
            commandLine 'upx', "${project.buildDir}/windows-amd64/xl-blueprint.exe"
        }
    }
}

task uploadToS3 {
    mustRunAfter 'publish'
    dependsOn 'uploadDarwinToS3', 'uploadWindowsToS3', 'uploadLinuxToS3'
}

task uploadDarwinToS3(type: AmazonS3FileUploadTask) {
    file file("${project.buildDir}/darwin-amd64/blueprint-cli")
    bucketName 'blueprint-cli'
    key "bin/${project.version}/darwin-amd64/blueprint-cli"
}

task uploadWindowsToS3(type: AmazonS3FileUploadTask) {
    file file("${project.buildDir}/windows-amd64/blueprint-cli.exe")
    bucketName 'blueprint-cli'
    key "bin/${project.version}/windows-amd64/blueprint-cli.exe"
}

task uploadLinuxToS3(type: AmazonS3FileUploadTask) {
    file file("${project.buildDir}/linux-amd64/blueprint-cli")
    bucketName 'blueprint-cli'
    key "bin/${project.version}/linux-amd64/blueprint-cli"
}

task removeLicenseFolder {
    doLast {
        runCmd("rm", "-f", "licenses/licences.md")
    }
}

task downloadLicenses(type: Copy) {
  dependsOn removeLicenseFolder
  into 'licenses'
  from 'go.mod'
  rename { it - 'go.mod' + 'licences.md'}
  filter { line ->
    def result = (line =~ /^[\s]+[a-zA-Z0-9.\/-]+/)
    if (result) {
        return "http://${result[0].trim()}"
    }
  }
}

task updateLicenses {
    inputs.files "go.mod"
    dependsOn downloadLicenses
}

task test {
    dependsOn goTest
}

clean.doFirst {
    delete 'build'
}

sonarqube {
    properties {
        property "sonar.projectKey", "xl-cli"
        property "sonar.projectName", "xl-cli"
        property "sonar.sources", "./"
        property "sonar.exclusions", "**/*_test.go,**/vendor/**"
        property "sonar.go.coverage.reportPaths", ".gogradle/reports/coverage/**/*.out"
    }
}

// The way tasks dependOn here are very important, please don't change unless there is a valid reason
goBuild.dependsOn goPrepare, test
goBuild.finalizedBy updateLicenses
build.dependsOn goBuild
goTest.dependsOn goPrepare
goClean.dependsOn clean

// disable these tasks as dependencies are mnaged with go modules
project.gradle.startParameter.excludedTaskNames.add('installDependencies')
project.gradle.startParameter.excludedTaskNames.add('resolveBuildDependencies')
project.gradle.startParameter.excludedTaskNames.add('resolveTestDependencies')
project.gradle.startParameter.excludedTaskNames.add('goVendor')

/* Private utility functions  */

def runCmd(Object... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine args
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def ldflag(c, v) {
    "-X \"github.com/xebialabs/blueprint-cli/cmd/blueprint/cmd.${c}=${v}\" "
}

def versionLdFlag(key) {
    return project.hasProperty(key) && project.property(key) != "" ? ldflag(key, validateVersions(key)) : ""
}

def validateVersions(key) {
    def versions = project.property(key)
    def valid = true
    def semverPattern = ~/^([0-9]*)\.([0-9]*)(\.([0-9]+)(-([0-9]*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.([0-9]*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?)?$/
    def cleanVersions = []

    versions.split(',').each {
        if (!it.trim().matches(semverPattern)) {
            valid = false
        }
        cleanVersions.add(it.trim())
    }
    if (!valid) throw new GradleException("Invalid versions passed for ${key} property, pass comma seperated versions in semver format. E.g: 9.0.5, 9.5")
    return cleanVersions.join(',')
}
